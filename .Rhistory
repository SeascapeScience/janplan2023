testing <- testing(data_split)
training <- training(data_split)
# recipe
data_recipe <- recipe(Pounds ~ .,
data = training) |>
update_role(Year, new_role = "ID") |>
update_role(PoundsLag, new_role = "predictor")
View(data)
View(data)
q()
amo <- readr::read_csv('~/Work/Research/TidyModels/amo_w_means_1856_2021.csv') |>
select(Year,Jan,Feb,Mar) |>
rename(amo_jan = Jan, amo_feb = Feb, amo_mar = Mar)
nao <- readr::read_csv('~/Work/Research/TidyModels/nao_w_means_1950_2021.csv') |>
select(Year,Jan,Feb,Mar) |>
rename(nao_jan = Jan, nao_feb = Feb, nao_mar = Mar)
gsi <- readr::read_csv('~/Work/Research/TidyModels/gsi_w_means_1954_2020.csv') |>
select(year,Jan,Feb,Mar) |>
rename(gsi_jan = Jan, gsi_feb = Feb, gsi_mar = Mar, Year = year)
landings <- readr::read_csv('~/Work/Research/TidyModels/foss_landings.csv') |>
select(Year,Pounds)
data <- left_join(amo,nao,by="Year")
data <- left_join(data,gsi,by="Year")
data <- left_join(data,landings,by="Year")
# Create lagged column
data <- data[order(data$Year), ]
data$PoundsLag <- NA
data$PoundsLag[2:dim(data)[1]] <- data$Pounds[1:(dim(data)[1]-1)]
data <- na.omit(data)
library(dplyr)
amo <- readr::read_csv('~/Work/Research/TidyModels/amo_w_means_1856_2021.csv') |>
select(Year,Jan,Feb,Mar) |>
rename(amo_jan = Jan, amo_feb = Feb, amo_mar = Mar)
nao <- readr::read_csv('~/Work/Research/TidyModels/nao_w_means_1950_2021.csv') |>
select(Year,Jan,Feb,Mar) |>
rename(nao_jan = Jan, nao_feb = Feb, nao_mar = Mar)
gsi <- readr::read_csv('~/Work/Research/TidyModels/gsi_w_means_1954_2020.csv') |>
select(year,Jan,Feb,Mar) |>
rename(gsi_jan = Jan, gsi_feb = Feb, gsi_mar = Mar, Year = year)
landings <- readr::read_csv('~/Work/Research/TidyModels/foss_landings.csv') |>
select(Year,Pounds)
data <- left_join(amo,nao,by="Year")
data <- left_join(data,gsi,by="Year")
data <- left_join(data,landings,by="Year")
data <- data[order(data$Year), ]
data$PoundsLag <- NA
data$PoundsLag[2:dim(data)[1]] <- data$Pounds[1:(dim(data)[1]-1)]
data <- na.omit(data)
library(tidymodels)
# data splits
data_time_split <- initial_split(data, prop = 3/4)
testing <- testing(data_split)
training <- training(data_split)
# data splits
data_split <- initial_time_split(data, prop = 3/4)
testing <- testing(data_split)
training <- training(data_split)
# recipe
data_recipe <- recipe(Pounds ~ .,
data = training) |>
update_role(Year, new_role = "ID") |>
update_role(PoundsLag, new_role = "predictor")
# parsnip
rf <- rand_forest() |>
set_mode("regression") |>
set_args(trees = 500) |>
set_engine("ranger")
# workflow
data_wkf <- workflow() |>
add_recipe(data_recipe) |>
add_model(rf) |>
fit(training)
data_preds <- data_wkf |>
augment(testing)
plot(data_preds$.pred,data_preds$Pounds)
cor.test(data_preds$.pred,data_preds$Pounds)
plot(data_preds$Year,data_preds$.pred,ylim = c(0,1.5e8),xlim=c(1950,2020))
lines(data$Year,data$Pounds)
View(data)
View(data)
summary(data_frame())
summary(data_recipe)
q()
rstudioapi::addTheme("https://raw.githubusercontent.com/batpigandme/night-owlish/master/rstheme/night-owlish.rstheme", apply = TRUE)
library(dplyr)
library(habobis)
x <- fetch_species("Alexandrium affine")
x <- fetch_species()
list.files('~/Work/Data/hab/')
splist <- list.files('~/Work/Data/hab/')
splist[1]
x <- fetch_species("alexandrium affine")
x <- fetch_species("alexandrium_affine")
x <- fetch_species("alexandrium affine")
x <- fetch_species("alexandrium affine")
species.list <- list.files('~/Work/Data/hab/')
length(species.list)
i=1
species.list[i]
s <- species.list[i]
s
length(s)
s[1:5]
?gsub
unlist(strsplit(s, split='.', fixed=TRUE))[1]
for (i in 1:length(species.list))
{
s <- species.list[i]
species.list[i] <- unlist(strsplit(s, split='.', fixed=TRUE))[1]
}
species.list[1]
species.list[5]
data <- fetch_species(species.list)
data <- fetch_species(scientificname = species.list)
s <- as.list(species.list)
data <- fetch_species(as.list(species.list))
data <- fetch_species(c(species.list))
data <- fetch_species(c(as.list(species.list)))
species.list
t(species.list)
data <- fetch_species(c(t(species.list)))
data <- fetch_species((t(species.list)))
c("Alexandrium affine", "Alexandrium andersonii")
data <- fetch_species(c((species.list)),bind=TRUE)
data <- read_species(species.list, bind = T)
data <- read_species(c(species.list), bind = T)
data <- read_species(c(species.list[1:2]), bind = T)
data <- read_species(c(species.list[1]), bind = T)
data <- read_species(c(species.list[1:20]), bind = T)
data <- read_species(c(species.list[1:15]), bind = T)
data <- read_species(c(species.list[1:12]), bind = T)
data <- read_species(c(species.list[1:11]), bind = T)
data <- read_species(c(species.list[1:10]), bind = T)
data <- read_species(c(species.list[1:5]), bind = T)
data <- read_species(c(species.list[1:3]), bind = T)
data <- read_species(c(species.list[1:2]), bind = T)
species.list[2:3]
x <- read_species(c("alexandrium_andersonii","alexandrium_angustitabulatum"),bind=T)
x <- read_species(c("alexandrium_andersonii","alexandrium_angustitabulatum"),bind=T)
x <- read_species(c("alexandrium andersonii","alexandrium angustitabulatum"),bind=T)
x <- read_species(c("Alexandrium andersonii","Alexandrium angustitabulatum"),bind=T)
x <- read_species(c("Alexandrium andersonii"),bind=T)
x <- read_species(c("Alexandrium angustitabulatum"),bind=T)
library(sf)
library(leaflet)
plot(data$decimalLongitude,data$decimalLatitude)
length(data)
View(data)
View(data)
dim(data)
dim(data)[1]
species.count=NA
for (i in 1:length(species.list))
{
x <- read_species(species.list[i])
species.count <- dim(x)[1]
}
plot(species.count)
species.count=NA
for (i in 1:length(species.list))
{
x <- read_species(species.list[i])
species.count[i] <- dim(x)[1]
}
plot(species.count)
bar(species.count)
q()
q()
setwd('~/Work/Research/Antarctic/krill-tank-code/DataProcessing/Notebooks/')
library(ggplot2)
library(GGally)
load('~/Work/Data/Antarctic/Total Merged Data File (July 11 2022).RData')
View(CC.TotalData)
flow.rate <- 0  # 0 0.6 3 5.9 8.9
chlorophyll <- 0 # 0 4.3 4.6 5.5 6.1 7.6 13.5 19
guano <- 1 # Absent=1 Present=2
light <- 2 # Absent=1 Present=2
ggpairs(CC.TotalData[
(CC.TotalData$Flow.rate==flow.rate &
CC.TotalData$Chlorophyll==chlorophyll &
as.numeric(CC.TotalData$Guano)==guano &
as.numeric(CC.TotalData$Light)==light),],
columns = c(21,22,23,26,27,28))
class(CC.TotalData)
dim(CC.TotalData[
(CC.TotalData$Flow.rate==flow.rate &
CC.TotalData$Chlorophyll==chlorophyll &
as.numeric(CC.TotalData$Guano)==guano &
as.numeric(CC.TotalData$Light)==light),])
guano<-2
ggpairs(CC.TotalData[
(CC.TotalData$Flow.rate==flow.rate &
CC.TotalData$Chlorophyll==chlorophyll &
as.numeric(CC.TotalData$Guano)==guano &
as.numeric(CC.TotalData$Light)==light),],
columns = c(21,22,23,26,27,28))
save(CC.TotalData,file="CC.TotalData.2022.07.20.RData")
)
rm(list=ls(all=TRUE))
load('~/Work/Data/Antarctic/CC.TotalData.2022.07.20.RData')
flow.rate <- 0  # 0 0.6 3 5.9 8.9
chlorophyll <- 0 # 0 4.3 4.6 5.5 6.1 7.6 13.5 19
guano <- 1 # Absent=1 Present=2
light <- 2 # Absent=1 Present=2
ggpairs(CC.TotalData[
(CC.TotalData$Flow.rate==flow.rate &
CC.TotalData$Chlorophyll==chlorophyll &
as.numeric(CC.TotalData$Guano)==guano &
as.numeric(CC.TotalData$Light)==light),],
columns = c(21,22,23,26,27,28))
plot(CC.TotalData[
(CC.TotalData$Flow.rate==flow.rate &
CC.TotalData$Chlorophyll==chlorophyll &
as.numeric(CC.TotalData$Guano)==guano &
as.numeric(CC.TotalData$Light)==light),c(21,28)])
plot(log10(CC.TotalData[
(CC.TotalData$Flow.rate==flow.rate &
CC.TotalData$Chlorophyll==chlorophyll &
as.numeric(CC.TotalData$Guano)==guano &
as.numeric(CC.TotalData$Light)==light),21]),
log10(CC.TotalData[
(CC.TotalData$Flow.rate==flow.rate &
CC.TotalData$Chlorophyll==chlorophyll &
as.numeric(CC.TotalData$Guano)==guano &
as.numeric(CC.TotalData$Light)==light),28]))
plot(log10(CC.TotalData[
(CC.TotalData$Flow.rate==flow.rate &
CC.TotalData$Chlorophyll==chlorophyll &
as.numeric(CC.TotalData$Guano)==guano &
as.numeric(CC.TotalData$Light)==light),21]),
(CC.TotalData[
(CC.TotalData$Flow.rate==flow.rate &
CC.TotalData$Chlorophyll==chlorophyll &
as.numeric(CC.TotalData$Guano)==guano &
as.numeric(CC.TotalData$Light)==light),22]))
plot((CC.TotalData[
(CC.TotalData$Flow.rate==flow.rate &
CC.TotalData$Chlorophyll==chlorophyll &
as.numeric(CC.TotalData$Guano)==guano &
as.numeric(CC.TotalData$Light)==light),22]),
(CC.TotalData[
(CC.TotalData$Flow.rate==flow.rate &
CC.TotalData$Chlorophyll==chlorophyll &
as.numeric(CC.TotalData$Guano)==guano &
as.numeric(CC.TotalData$Light)==light),22]))
plot((CC.TotalData[
(CC.TotalData$Flow.rate==flow.rate &
CC.TotalData$Chlorophyll==chlorophyll &
as.numeric(CC.TotalData$Guano)==guano &
as.numeric(CC.TotalData$Light)==light),22]),
(CC.TotalData[
(CC.TotalData$Flow.rate==flow.rate &
CC.TotalData$Chlorophyll==chlorophyll &
as.numeric(CC.TotalData$Guano)==guano &
as.numeric(CC.TotalData$Light)==light),23]))
plot((CC.TotalData[
(CC.TotalData$Flow.rate==flow.rate &
CC.TotalData$Chlorophyll==chlorophyll &
as.numeric(CC.TotalData$Guano)==guano &
as.numeric(CC.TotalData$Light)==light),22]),
(CC.TotalData[
(CC.TotalData$Flow.rate==flow.rate &
CC.TotalData$Chlorophyll==chlorophyll &
as.numeric(CC.TotalData$Guano)==guano &
as.numeric(CC.TotalData$Light)==light),23]),
pch = 20,
cex = 2,
col = rgb(0, 1, 0, .5))
plot((CC.TotalData[
(CC.TotalData$Flow.rate==flow.rate &
CC.TotalData$Chlorophyll==chlorophyll &
as.numeric(CC.TotalData$Guano)==guano &
as.numeric(CC.TotalData$Light)==light),22]),
(CC.TotalData[
(CC.TotalData$Flow.rate==flow.rate &
CC.TotalData$Chlorophyll==chlorophyll &
as.numeric(CC.TotalData$Guano)==guano &
as.numeric(CC.TotalData$Light)==light),23]),
pch = 20,
cex = 2,
col = rgb(1, 1, 1, .2))
plot((CC.TotalData[
(CC.TotalData$Flow.rate==flow.rate &
CC.TotalData$Chlorophyll==chlorophyll &
as.numeric(CC.TotalData$Guano)==guano &
as.numeric(CC.TotalData$Light)==light),22]),
(CC.TotalData[
(CC.TotalData$Flow.rate==flow.rate &
CC.TotalData$Chlorophyll==chlorophyll &
as.numeric(CC.TotalData$Guano)==guano &
as.numeric(CC.TotalData$Light)==light),23]),
pch = 20,
cex = 2,
col = rgb(0, 0, 0, .2))
plot((CC.TotalData[
(CC.TotalData$Flow.rate==flow.rate &
CC.TotalData$Chlorophyll==chlorophyll &
as.numeric(CC.TotalData$Guano)==guano &
as.numeric(CC.TotalData$Light)==light),22]),
(CC.TotalData[
(CC.TotalData$Flow.rate==flow.rate &
CC.TotalData$Chlorophyll==chlorophyll &
as.numeric(CC.TotalData$Guano)==guano &
as.numeric(CC.TotalData$Light)==light),23]),
pch = 20,
cex = 1.2,
col = rgb(0, 0, 0.2, .1))
# This is a work in progress....
rm(list=ls(all=TRUE))
#load("C:\\Users\\Nicole Hellessey\\Documents\\Post-doc\\Data\\Total Merged Data File (July 12 2022).Rdata")
#load('~/Work/Data/Antarctic/Total Merged Data File (July 11 2022).RData')
load('~/Work/Data/Antarctic/CC.TotalData.2022.07.20.RData')
flow.rate <- 0  # 0 0.6 3 5.9 8.9
chlorophyll <- 0 # 0 4.3 4.6 5.5 6.1 7.6 13.5 19
guano <- 1 # Absent=1 Present=2
light <- 2 # Absent=1 Present=2
x <- CC.TotalData$v[
(CC.TotalData$Flow.rate==flow.rate &
CC.TotalData$Chlorophyll==chlorophyll &
as.numeric(CC.TotalData$Guano)==guano &
as.numeric(CC.TotalData$Light)==light)]
length(x)
plot(x[1:length(x)-1],x[2:length(x)])
plot(log10(x[1:length(x)-1]),log10(x[2:length(x)]))
plot(log10(velocity[1:length(x)-1]),log10(velocity[2:length(x)]),
pch = 20,
cex = 1.2,
col = rgb(0, 0, 0.2, .1))
velocity<-x
col = rgb(0, 0, 0.2, .1))
plot(log10(velocity[1:length(x)-1]),log10(velocity[2:length(x)]),
pch = 20,
cex = 1.2,
col = rgb(0, 0, 0.2, .1))
plot(log10(velocity[1:length(x)-1]),log10(velocity[2:length(x)]),
pch = 20,
cex = 1.2,
col = rgb(0, 0, 0.2, .1))
plot(log10(velocity[1:length(x)-1]),log10(velocity[2:length(x)]),
pch = 20,
cex = 1.2,
col = rgb(0, 0, 0.2, .05))
c<-corr(log10(velocity[1:length(x)-1]),log10(velocity[2:length(x)]))
c<-cor(log10(velocity[1:length(x)-1]),log10(velocity[2:length(x)]))
c
c<-cor.test(log10(velocity[1:length(x)-1]),log10(velocity[2:length(x)]))
c
c$statistic
c$estimate
c$estimate^2
for (i in unique(CC.TotalData$Chlorophyll)) {
i
}
for (chl in unique(CC.TotalData$Chlorophyll)) {
chl+1
}
chl
for (chl in unique(CC.TotalData$Chlorophyll)) {
as.numeric(chl)+1
end
for (chl in unique(CC.TotalData$Chlorophyll)) {
as.numeric(chl)+1
}
length(unique(CC.TotalData$Chlorophyll))
C <- NA
chls <- unique(CC.TotalData$Chlorophyll)
for (i in 1:length(chls))
{
chlorophyll <- as.numeric(chls[i])
velocity <- CC.TotalData$v[
(CC.TotalData$Flow.rate==flow.rate &
CC.TotalData$Chlorophyll==chlorophyll &
as.numeric(CC.TotalData$Guano)==guano &
as.numeric(CC.TotalData$Light)==light)]
c<-cor.test(log10(velocity[1:length(x)-1]),log10(velocity[2:length(x)]))
C[i] <- c$estimate
}
i
chlorophyll
chls[i]
chls[[i]]
as.numeric(unique(CC.TotalData$Chlorophyll))
class(unique(CC.TotalData$Chlorophyll))
(unique(CC.TotalData$Chlorophyll))
unique(CC.TotalData$Chlorophyll)
as.character(unique(CC.TotalData$Chlorophyll))
as.numeric(as.character(unique(CC.TotalData$Chlorophyll)))
C <- NA
chls <- as.numeric(as.character(unique(CC.TotalData$Chlorophyll)))
for (i in 1:length(chls))
{
chlorophyll <- (chls[i])
velocity <- CC.TotalData$v[
(CC.TotalData$Flow.rate==flow.rate &
CC.TotalData$Chlorophyll==chlorophyll &
as.numeric(CC.TotalData$Guano)==guano &
as.numeric(CC.TotalData$Light)==light)]
c<-cor.test(log10(velocity[1:length(x)-1]),log10(velocity[2:length(x)]))
C[i] <- c$estimate
}
i
C
C <- NA
chls <- as.numeric(as.character(unique(CC.TotalData$Chlorophyll)))
for (i in 1:length(chls))
{
chlorophyll <- (chls[i])
velocity <- CC.TotalData$v[
(CC.TotalData$Flow.rate==flow.rate &
CC.TotalData$Chlorophyll==chlorophyll &
as.numeric(CC.TotalData$Guano)==guano &
as.numeric(CC.TotalData$Light)==light)]
c<-cor.test(1+log10(velocity[1:length(x)-1]),log10(1+velocity[2:length(x)]))
C[i] <- c$estimate
}
i
dim(velocity)
length(velocity)
C <- NA
chls <- as.numeric(as.character(unique(CC.TotalData$Chlorophyll)))
for (i in 1:length(chls))
{
chlorophyll <- (chls[i])
velocity <- CC.TotalData$v[
(CC.TotalData$Flow.rate==flow.rate &
CC.TotalData$Chlorophyll==chlorophyll &
as.numeric(CC.TotalData$Guano)==guano &
as.numeric(CC.TotalData$Light)==light)]
c<-cor.test(log10(velocity[1:length(x)-1]),log10(velocity[2:length(x)]))
if (length(velocity) <= 1) {
C[i] <- NA } else {
C[i] <- c$estimate}
}
i
C <- NA
chls <- as.numeric(as.character(unique(CC.TotalData$Chlorophyll)))
for (i in 1:length(chls))
{
chlorophyll <- (chls[i])
velocity <- CC.TotalData$v[
(CC.TotalData$Flow.rate==flow.rate &
CC.TotalData$Chlorophyll==chlorophyll &
as.numeric(CC.TotalData$Guano)==guano &
as.numeric(CC.TotalData$Light)==light)]
c<-cor.test(log10(velocity[1:length(x)-1]),log10(velocity[2:length(x)]))
if (length(velocity) <= 1) {
C[i] <- NA } else {
c<-cor.test(log10(velocity[1:length(x)-1]),
log10(velocity[2:length(x)]))
C[i] <- c$estimate}
}
i
length(velocity)
C <- NA
chls <- as.numeric(as.character(unique(CC.TotalData$Chlorophyll)))
for (i in 1:length(chls))
{
chlorophyll <- (chls[i])
velocity <- CC.TotalData$v[
(CC.TotalData$Flow.rate==flow.rate &
CC.TotalData$Chlorophyll==chlorophyll &
as.numeric(CC.TotalData$Guano)==guano &
as.numeric(CC.TotalData$Light)==light)]
if (length(velocity) <= 1) {
C[i] <- NA } else {
c<-cor.test(log10(velocity[1:length(x)-1]),
log10(velocity[2:length(x)]))
C[i] <- c$estimate}
}
C
plot(chls,C)
plot(chls,C,xlab='Chlorophyll',ylab='autocorrelation')
q()
q()
setwd('~/Work/Teaching/Colby/JanPlan2023/janplan2023/')
knitr::opts_chunk$set(echo = TRUE)
install.packages(c("dplyr", "readr", "robis", "mapview", "sf", "obisniche", "ggplot2"))
library(dplyr)
library(readr)
library(robis)
install.packages('sf')
options(timeout = max(1000, getOption("timeout")))
install.packages('sf')
library('sf')
occ <- occurrence(scientificname = "Carcharodon carcharias") |>
distinct()
library('robis')
occ <- occurrence(scientificname = "Carcharodon carcharias") |>
distinct()
robis::map_leaflet(occ)
occ_sf <- occ |>
st_as_sf(coords = c("decimalLongitude", "decimalLatitude"), crs = 4326)
mapview(occ_sf, fgb = F, georaster = F, zcol = "basisOfRecord")
library('mapview')
install.packages('mapview')
library('mapview')
library('mapview')
library(mapview)
library('mapview')
install.packages("raster")
library('mapview')
occ_sf <- occ |>
st_as_sf(coords = c("decimalLongitude", "decimalLatitude"), crs = 4326)
mapview(occ_sf, fgb = F, georaster = F, zcol = "basisOfRecord")
y = group_stats(occ)
library(dplyr)
library(readr)
library(robis)
library(mapview)
library(sf)
library(obisniche)
q()
